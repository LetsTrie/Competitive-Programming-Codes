#include<bits/stdc++.h>

#define fi first
#define endl '\n'
#define se second
#define LL long long
#define pb push_back
#define vi vector<int>
#define EPS (double)1e-8
#define pii pair<int , int>
#define sz(x) (int) x.size()
#define sl(x) scanf("%lld",&x)
#define sii(x, y) si(x) , si(y)
#define all(x) (x).begin() , (x).end()
#define lg2(X) (31 - __builtin_clz(X))
#define llg2(X) (63 - __builtin_clzll(X))
#define rall(x) (x).rbegin() , (x).rend()
#define siii(x, y, z) si(x) , si(y) , si(z)
#define mem(a , b) memset((a), (b), sizeof(a))
#define FOR(i , n) for(int i = 0 ; i < n ; i++)
#define FOR1(i , n) for(int i = 1 ; i <= n ; i++)
#define _ceil(n, a) ((n)%(a)==0?((n)/(a)):((n)/(a)+1))
#define mlr int mid = (lo + hi) / 2 , l = node << 1 , r = l | 1 // 1 based
#define itr(it, X) for (__typeof((X).begin()) it = (X).begin(); it != (X).end(); it++)
template <typename T> T si(T &n){n = 0;bool neg = false;char c = getchar();while( c < '0' || c > '9'){if(c == '-') neg = true;c = getchar();}while(c >= '0' && c <= '9'){n = n*10 + c-48;c = getchar();}if(neg) n = ~(n-1);return n;}
// Don't Use this I/O in EOF 
using namespace std;
//Edges Can Be Zero (Specially in Tree)
const int MAXN = 1005;
//const int MOD  = 100000000;
//const int inf  = 1 << 28; 
/*
int fx[] = {1 , 0 , -1 , 0}; //, 1 , 1 , -1 , -1};
int fy[] = {0 , 1 , 0 , -1}; //, 1 , -1 , 1 , -1};
*/

int G[MAXN][MAXN];
int residue[MAXN][MAXN];
int ver, eg;
bool vis[MAXN];
queue<int> Q;
int par[MAXN];

int bfs(int s , int sink)
{
	Q.push(s);
	FOR1(i , ver) vis[i] = 0 , par[i] = -1;
	vis[s] = 1;
	while(!Q.empty()) {
		int u = Q.front();
		Q.pop();
		FOR1(i , ver) {
			if(!vis[i] && residue[u][i] > 0) {
				vis[i] = 1;
				par[i] = u;
				Q.push(i);
			}
		}
	}
	return (vis[sink] == true);
}

int MaxFlowFF(int s , int sink) {
	LL Flow = 0;
	while(bfs(s , sink)) {
		int x = s , y = sink;
		int neck = INT_MAX;
		while(y != x) {
			neck = min(neck, residue[par[y]][y]);
			y = par[y];
		} 

		y = sink;
		while(y != x) {
			residue[par[y]][y] -= neck;
			residue[y][par[y]] += neck;
			y = par[y];
		}
		Flow += neck;
	}

	return Flow;
}

int main() {

#ifndef ONLINE_JUDGE
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#endif

	sii(ver , eg);
	while(eg--) {
		int x , y , z;
		siii(x , y , z);
		G[x][y] = z;
		residue[x][y] = z;
	}
	int s , sink;
	sii(s , sink);
	cout << MaxFlowFF(s , sink) << endl;
}  

/*
6 7
1 2 2
1 3 5
2 4 3
2 5 1
3 4 3
4 6 4
5 6 4
1 6
*/
