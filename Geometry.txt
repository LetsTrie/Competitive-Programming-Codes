#include<bits/stdc++.h>

using namespace std;

const double pi = acos(-1.0);

struct point {
    double x, y;
    point() {
        x = y = 0;
    }
    point(double _x, double _y) {
        x = _x, y = _y;
    }
    point operator + (const point & other) const {
        return point(x + other.x, y + other.y);
    }
    point operator - (const point & other) const {
        return point(x - other.x, y - other.y);
    }
    point operator = (const point & other) const {
        return point(other.x, other.y);
    }
    void read() {
       scanf("%lf %lf", &x, &y);
    }
};

struct line
{
	double a, b, c;
	line(){}
	line(double _a, double _b, double _c) {
		a = _a , b = _b , c = _c;
	}
	line(point one, point two) {
		a = two.y - one.y;
		b = one.x - two.x;
		c = (one.y * two.x) - (one.x * two.y);
	}

	double DistFromApoint2Line(point p) {
		return ( fabs(a * p.x + b * p.y + c) * 1.0 / sqrt(a * a + b * b) );
	}

	bool intersectTwoLine(line two, point &p, bool &SameOrNot) {
		double dv = a * two.b - two.a * b;
		if(dv == 0.0) {
			SameOrNot = ( two.a * b == a * two.b &&  two.a * c == a * two.c && two.b * c == b * two.c );
			// if(SameOrNot == true) Lines Are Same
			// else Lines Are Parallel
			return false;
		}
		p.x = (b * two.c - c * two.b) * 1.0 / dv;
		p.y = (c * two.a - a * two.c) * 1.0 / dv;
		return true;
	}

	double placeTheValueXY(point x) {
		double v = (1.0 * a * x.x + b * x.y + c);
		if(v == 0) return 0;
		if(v < 0) return -1; //Anti clockwise
		return +1;
	}

	line perpLine(point x) {
		return line(b , -a , (a * x.y - b * x.x) );
	}
	void read() {
       scanf("%lf %lf %lf", &a, &b, &c);
    }
};

inline double dist2(point a, point b) {
    return ((a.x - b.x) * (a.x - b.x)) + ((a.y - b.y) * (a.y - b.y));
}

inline double dist(point a, point b) {
    return sqrt(dist2(a, b));
}

inline double DotProduct(point a, point b, point p) {
    return ((b.x - a.x) * (p.x - a.x)) + ((b.y - a.y) * (p.y - a.y));
}

inline double getAreaTriangle(point a, point b, point c) {
    return fabs(0.5 * ((a.x * b.y) + (b.x * c.y) + (c.x * a.y) - (a.x * c.y) - (c.x * b.y) - (b.x * a.y)));
}

inline double CrossProduct(point a, point b, point p) {
    return ((b.x - a.x) * (p.y - a.y)) - ((b.y - a.y) * (p.x - a.x));
    // Positive if (AB ^ AP > 0) && (AB ^ AP < 180)
    // negetive if (AB ^ AP > 180) && (AB ^ AP < 360)
    // Zero if (AB ^ AP == 0 == 180 == 360)
}

double ProjectionInsideTheRayOrOutside(point A, point B, point P) {
    return 1.0 * DotProduct(A, B, P) / dist2(A, B);
    // Be CareFul About the infinity (Divide By Zero).
}

point PerpendicularpointQ(point A, point B, point P) {
    double multiple = ProjectionInsideTheRayOrOutside(A, B, P);
    return point(A.x + multiple * (B.x - A.x), A.y + multiple * (B.y - A.y));
}

double PointToSegment(point A, point B, point P) {
    double InOut = ProjectionInsideTheRayOrOutside(A, B, P);
    point Q;
    if (InOut <= 0) Q = A;
    else if (InOut >= 1) Q = B;
    else Q = PerpendicularpointQ(A, B, P);
    return dist(P, Q);
}

double SegmentSegmentIntersect(point A1, point A2, point B1, point B2) {
    return (min(A1.x, A2.x) <= max(B1.x, B2.x) && min(A1.y, A2.y) <= max(B1.y, B2.y) &&
        min(B1.x, B2.x) <= max(A1.x, A2.x) && min(B1.y, B2.y) <= max(A1.y, A2.y) &&
        CrossProduct(A1, A2, B1) * CrossProduct(A1, A2, B2) <= 0 &&
        CrossProduct(B1, B2, A1) * CrossProduct(B1, B2, A2) <= 0);
}

double angle(point a, point b, point p) {
    double res = 1.0 * DotProduct(a, b, p) / sqrt(1.0 * dist2(a, b) * dist2(a, p));
    if (res >= 1.0) res = 1.0;
    if (res <= -1.0) res = -1.0;
    res = acos(1.0 * res);
    if (CrossProduct(a, b, p) < 0) res = pi + pi - res; // if(angle is between [0, 2pi) )
    return res;
}

double toRadian(double deg) {
    return (deg * pi / 180.0);
}

double dist_inPolar(double r1, double theta1, double r2, double theta2) {
    // Theta is always in Radian
    return dist(point(r1 * cos(theta1), r1 * sin(theta1)), point(r2 * cos(theta2), r2 * sin(theta2)));
}

int main() {
    cout << setprecision(12) << fixed;
    cerr << setprecision(12) << fixed;
    
    
}
