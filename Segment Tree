void build(int lo = 1, int hi = N , int node = 1) {
	/* Do U really Build */
	/* 1 Based. Be Careful */
	/* Tree size is 4 times MAXN */
	if(lo == hi) { tree[node] = arr[lo] ; return; }
	mlr ; build(lo , mid , l) , build(mid + 1 , hi , r);
	tree[node] = tree[l] + tree[r];
}

void update(int idx , int val , int lo = 1, int hi = N , int node = 1) {
	if(lo > hi || idx < lo || hi < idx) return ;
	if(idx == hi && idx == lo) {tree[node] += val ; return ;}
	mlr ; update(idx , val , lo , mid , l) , update(idx , val , mid + 1 , hi , r);
	tree[node] = tree[l] + tree[r];
}

LL get(int x , int y , int lo = 1, int hi = N , int node = 1){
	if(lo > hi || lo > y || hi < x) return 0LL;
	if(x <= lo && hi <= y) return tree[node]; mlr ;
	return get(x , y , lo , mid , l) + get(x , y , mid + 1 , hi, r);
}

